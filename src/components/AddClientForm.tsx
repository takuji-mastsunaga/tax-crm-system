"use client"; import { useState } from "react"; import { collection, addDoc } from "firebase/firestore"; import { db } from "@/lib/firebase"; interface AddClientFormProps { onClose: () => void; onSuccess: () => void; } export default function AddClientForm({ onClose, onSuccess }: AddClientFormProps) { const [formData, setFormData] = useState({ companyName: "", contactPerson: "", email: "", phone: "", address: "", taxId: "", status: "pending" as "active" | "pending" | "inactive", notes: "" }); const [loading, setLoading] = useState(false); const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); setLoading(true); try { await addDoc(collection(db, "clients"), { ...formData, contractDate: new Date() }); onSuccess(); onClose(); } catch (error) { console.error("顧客追加エラー:", error); alert("顧客の追加に失敗しました。"); } finally { setLoading(false); } }; return ( <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4"> <div className="bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto"> <div className="p-6"> <h2 className="text-xl font-bold mb-4">新規顧客追加</h2> <form onSubmit={handleSubmit} className="space-y-4"> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium mb-1">会社名 *</label> <input type="text" required value={formData.companyName} onChange={(e) => setFormData({...formData, companyName: e.target.value})} className="w-full border rounded px-3 py-2" /> </div> <div> <label className="block text-sm font-medium mb-1">担当者 *</label> <input type="text" required value={formData.contactPerson} onChange={(e) => setFormData({...formData, contactPerson: e.target.value})} className="w-full border rounded px-3 py-2" /> </div> </div> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium mb-1">メールアドレス</label> <input type="email" value={formData.email} onChange={(e) => setFormData({...formData, email: e.target.value})} className="w-full border rounded px-3 py-2" /> </div> <div> <label className="block text-sm font-medium mb-1">電話番号</label> <input type="text" value={formData.phone} onChange={(e) => setFormData({...formData, phone: e.target.value})} className="w-full border rounded px-3 py-2" /> </div> </div> <div> <label className="block text-sm font-medium mb-1">住所</label> <input type="text" value={formData.address} onChange={(e) => setFormData({...formData, address: e.target.value})} className="w-full border rounded px-3 py-2" /> </div> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium mb-1">税務ID</label> <input type="text" value={formData.taxId} onChange={(e) => setFormData({...formData, taxId: e.target.value})} className="w-full border rounded px-3 py-2" /> </div> <div> <label className="block text-sm font-medium mb-1">ステータス</label> <select value={formData.status} onChange={(e) => setFormData({...formData, status: e.target.value as "active" | "pending" | "inactive"})} className="w-full border rounded px-3 py-2"> <option value="pending">検討中</option> <option value="active">稼働中</option> <option value="inactive">停止中</option> </select> </div> </div> <div> <label className="block text-sm font-medium mb-1">備考</label> <textarea value={formData.notes} onChange={(e) => setFormData({...formData, notes: e.target.value})} className="w-full border rounded px-3 py-2 h-20" /> </div> <div className="flex gap-2 pt-4"> <button type="submit" disabled={loading} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:bg-gray-400"> {loading ? "追加中..." : "追加"} </button> <button type="button" onClick={onClose} className="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400"> キャンセル </button> </div> </form> </div> </div> </div> ); }
